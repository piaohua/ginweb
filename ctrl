#!/bin/bash
# -------------------------------------
# 服务启动脚本
#
# @author piaohua
# @email 814004090@qq.com
# @date 2018-09-18 23:08:46
# -------------------------------------

set -e

appName=ginweb

workDir=$(cd `dirname $0`; pwd)
cd $workDir

GOPATH=$(cd ../../"$(dirname "$0")"; pwd)
SUI_SRC_DIR="${GOPATH}/src/${appName}"
LOGFILE="${workDir}/ctrl.log"

usage() {
    echo " ./ctrl cmd "
    echo " cmd : build (${appName}) (linux)"
    echo " cmd : start (${appName}) "
    echo " cmd : status (${appName})"
    echo " cmd : stop (${appName})"
    echo " cmd : restart"
}

get_curr_time() {
    echo `date +"%Y-%m-%d %H:%M:%S"`
}

save_log() {
    echo "" >> ${LOGFILE}
    echo "Time: "`get_curr_time`"   $1 " >> ${LOGFILE}
}

get_src_file() {
    if [[ ! -d ${SUI_SRC_DIR}/$1 ]]; then
        echo ""
    else
        echo ${appName}/$1
    fi
}

get_bin_file() {
    echo ${workDir}/$1-bin
}

get_pid_file() {
    echo ${workDir}/$1-bin.pid
}

get_pid() {
    ps aux | grep '${binFile}' | grep -v grep | awk '{print $2}' | head -1
}

get_logfile() {
    echo ${1}.log
}

build() {
    export GOPATH=${GOPATH}
    binFile=`get_bin_file $1`
    srcFile=`get_src_file $1`
    #echo "$binFile"
    #echo "$srcFile"
    if [[ ${binFile} == '' ]]; then
        echo "未指定输出文件"
        exit 1
    fi
    if [[ ! -d ${GOPATH}/src/${srcFile} ]]; then
        echo "目录不存在"
        exit 1
    fi
    case $2 in
        linux)
            export CGO_ENABLED=0
            export GOOS=linux
            export GOARCH=amd64
            export GOPATH=${GOPATH}
            echo -n "LINUX版本 ... "
            save_log "LINUX版本 ... "
            ;;
        windows)
            export CGO_ENABLED=0
            export GOOS=windows
            export GOARCH=amd64
            export GOPATH=${GOPATH}
            echo -n "WINDOWS版本 ... "
            save_log "WINDOWS版本 ... "
            ;;
    esac
    echo "${srcFile}编译中 ... "
    save_log "${srcFile}编译中 ... "
    go build -o ${binFile} -tags=jsoniter -ldflags "-w -s" ${srcFile}
}

start() {
    pidFile=`get_pid_file $1 $2`
    if [[ -e ${pidFile} ]]; then
        pid=`cat ${pidFile}`
    else
        pid=`get_pid $1 $2`
        if [[ $? -gt 0 ]]; then
            echo "失败, 执行文件不存在"
            exit 1
        fi
    fi
    if [ "$pid" != '' ]; then
        echo "服务正在运行中, 进程ID为${pid}"
    else
        binFile=`get_bin_file $1`
        if [[ ! -e ${binFile} ]]; then
            echo "执行BIN文件不存在"
            exit 1
        fi
        if [[ ${pidFile} == '' ]]; then
            echo "未指定输出PID文件"
            exit 1
        fi
        if [[ ${1} == '' ]]; then
            echo "未指定输出日志文件"
            exit 1
        fi
        echo -n "正在启动 ... "
        save_log "正在启动 ${binFile} ${2} ... "
        #ulimit -HSn 65535
        ulimit -HSn 1024
        logFile=`get_logfile $1`
        ${binFile} $2 -config=./conf/config.local.yaml -log_dir=logs -stderrthreshold=INFO >& ${logFile} &
        #${binFile} >& error.log 2>&1 &
        echo $! > ${pidFile}
        pid=`cat ${pidFile}`
        save_log "${binFile} started ${pid} ... "
        sleep 3s
        status $1 $2
    fi
}

status() {
    pidFile=`get_pid_file $1 $2`
    if [[ -e ${pidFile} ]]; then
        pid=`cat ${pidFile}`
    else
        pid=`get_pid $1 $2`
        if [[ $? -gt 0 ]]; then
            echo "失败, 执行文件不存在"
            exit 1
        fi
    fi
    if [[ -z "$pid" ]]; then
        echo "服务不在运行状态"
        exit 1
    fi
    exists=$(ps -ef | grep $pid | grep -v grep | wc -l)
    if [[ $exists -gt 0 ]]; then
        echo "服务正在运行中, 进程ID为${pid}"
    else
        echo "服务不在运行状态, 但进程ID文件存在"
    fi
}

stop() {
    pidFile=`get_pid_file $1 $2`
    if [[ -e ${pidFile} ]]; then
        pid=`cat ${pidFile}`
        #rm -f $pidFile
        mv -f $pidFile $pidFile"_bak"
    else
        pid=`get_pid $1 $2`
        if [[ $? -gt 0 ]]; then
            echo "失败, 执行文件不存在"
            exit 1
        fi
    fi
    if [ "$pid" != '' ]; then
        echo -n "正在停止 ... "
        save_log "${pidFile} 正在停止 ${pid} ... "
        kill -9 $pid
        #kill -1 $pid
        sleep 15s
        echo "$pid killed!"
        save_log "${pid} killed! "
    else
        echo "服务不在运行状态"
    fi
}

restart() {
    echo -n "正在重启 ... "
    stop $1 $2
    sleep 1s
    start $1 $2
}

show() {
    ps -ef | grep -v grep | grep ${appName}
}

case $1 in
    build)
        build $2 $3;;
    start)
        start $2 $3;;
    status)
        status $2 $3;;
    show)
        show;;
    stop)
        stop $2 $3;;
    restart)
        restart $2 $3;;
    *)
        usage;;
esac
